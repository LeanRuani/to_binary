{"version":3,"sources":["Binary.jsx","Text.jsx","Considerations.jsx","App.js","index.js"],"names":["Binary","text","binario","useState","open","setOpen","split","map","i","isNaN","a","charCodeAt","toString","push","b","Number","Grid","className","readOnly","value","join","container","direction","justify","alignItems","Button","onClick","navigator","clipboard","writeText","setInterval","color","variant","Collapse","in","Alert","action","IconButton","aria-label","size","Text","binary","texto","x","String","fromCharCode","parseInt","Considerations","List","component","ListItemText","App","setText","setBinary","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAuEeA,EAhEA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAGVC,EAAU,GAHW,EAIHC,oBAAS,GAJN,mBAIpBC,EAJoB,KAIdC,EAJc,KAsB3B,OAjBcJ,EAAKK,MAAM,UAEnBC,KAAI,SAACC,GACT,GAAKC,MAAMD,GAGJ,CACUA,EAAEF,MAAM,IAChBC,KAAI,SAACC,GACV,IAAME,EAAIF,EAAEG,WAAW,GAAGC,SAAS,GAEnC,OADAV,EAAQW,KAAKH,IACN,SARI,CACb,IAAMI,EAAIC,OAAOP,GAAGI,SAAS,GAC7BV,EAAQW,KAAKC,GASf,OAAO,KAIP,oCACE,kBAACE,EAAA,EAAD,KACE,8BACEC,UAAU,mBACVC,UAAQ,EACRC,MAAOjB,EAAQkB,KAAK,QAGxB,kBAACJ,EAAA,EAAD,CAAMK,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1D,kBAACC,EAAA,EAAD,CACEC,QAAS,WACPC,UAAUC,UAAUC,UAAU3B,EAAQkB,KAAK,MAC3Cf,GAAQ,GACRyB,aAAY,WACVzB,GAAQ,KACP,MAEL0B,MAAM,UACNC,QAAQ,aATV,QAcA,kBAACC,EAAA,EAAD,CAAUC,GAAI9B,GACZ,kBAAC+B,EAAA,EAAD,CACEC,OACE,kBAACC,EAAA,EAAD,CACEC,aAAW,QACXP,MAAM,UACNQ,KAAK,WALX,eCvCKC,EAbF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACRC,EAAQ,GASd,OARgBD,EAAOnC,MAAM,KAErBC,KAAI,SAAUoC,GAGpB,OAFAA,EAAIC,OAAOC,aAAaC,SAASH,EAAG,IACpCD,EAAM7B,KAAK8B,IACJ,KAGF,8BAAUzB,UAAQ,EAACC,MAAOuB,EAAMtB,KAAK,O,gBCe/B2B,EAvBQ,WACrB,OACE,yBAAK9B,UAAU,kBACb,kBAAC+B,EAAA,EAAD,CAAMC,UAAU,MAAMX,aAAW,YAC/B,kBAACY,EAAA,EAAD,KACE,uBAAGjC,UAAU,aAAb,gKAMF,6BACA,kBAACiC,EAAA,EAAD,KACE,uBAAGjC,UAAU,aAAb,wBACuB,qDADvB,wDC2BKkC,EAtCH,WAAO,IAAD,EACQhD,mBAAS,IADjB,mBACTF,EADS,KACHmD,EADG,OAEYjD,mBAAS,IAFrB,mBAETsC,EAFS,KAEDY,EAFC,KAchB,OACE,oCACE,yBAAKpC,UAAU,aACb,gDACA,kBAACD,EAAA,EAAD,CAAMK,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1D,8BAAUP,UAAU,iBAAiBqC,SAfxB,SAACC,GACpB,IAAMb,EAAQa,EAAEC,OAAOrC,MACvBiC,EAAQV,MAcF,kBAAC,EAAD,CAAQzC,KAAMA,MAGlB,yBAAKgB,UAAU,aACb,gDACA,kBAACD,EAAA,EAAD,CAAMK,WAAS,EAACC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1D,8BAAUP,UAAU,mBAAmBqC,SAjBxB,SAACC,GACtB,IAAMrD,EAAUqD,EAAEC,OAAOrC,MACzBkC,EAAUnD,MAgBJ,kBAAC,EAAD,CAAMuC,OAAQA,MAGlB,6BACE,wBAAIxB,UAAU,wBAAd,6BACA,kBAAC,EAAD,SCjCRwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.770a57ff.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst Binary = ({ text }) => {\r\n  //100000 \"espacio\" en binario\r\n\r\n  const binario = [];\r\n  const [open, setOpen] = useState(false);\r\n  const texto = text.split(\"100000\");\r\n\r\n  texto.map((i) => {\r\n    if (!isNaN(i)) {\r\n      const b = Number(i).toString(2);\r\n      binario.push(b);\r\n    } else {\r\n      const textoT = i.split(\"\");\r\n      textoT.map((i) => {\r\n        const a = i.charCodeAt(0).toString(2);\r\n        binario.push(a);\r\n        return true;\r\n      });\r\n    }\r\n    return true;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <textarea\r\n          className=\"textarea_binario\"\r\n          readOnly\r\n          value={binario.join(\" \")}\r\n        />\r\n      </Grid>\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n        <Button\r\n          onClick={() => {\r\n            navigator.clipboard.writeText(binario.join(\" \"));\r\n            setOpen(true);\r\n            setInterval(() => {\r\n              setOpen(false);\r\n            }, 2000);\r\n          }}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n        >\r\n          Copy\r\n        </Button>\r\n\r\n        <Collapse in={open}>\r\n          <Alert\r\n            action={\r\n              <IconButton\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n              ></IconButton>\r\n            }\r\n          >\r\n            Copiado\r\n          </Alert>\r\n        </Collapse>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Binary;\r\n","import React from \"react\";\r\n\r\nconst Text = ({ binary }) => {\r\n  const texto = [];\r\n  const binario = binary.split(\" \");\r\n\r\n  binario.map(function (x) {\r\n    x = String.fromCharCode(parseInt(x, 2));\r\n    texto.push(x);\r\n    return true;\r\n  });\r\n\r\n  return <textarea readOnly value={texto.join(\"\")} />;\r\n};\r\n\r\nexport default Text;\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nconst Considerations = () => {\r\n  return (\r\n    <div className=\"considerations\">\r\n      <List component=\"nav\" aria-label=\"contacts\">\r\n        <ListItemText>\r\n          <p className=\"text-item\">\r\n            Si solo se quiere saber el valor en binario de un numero es solo\r\n            ponerlo. Ahora, si se hace una cadena de numeros o de texto pasa a\r\n            binario seg√∫n ASCII.\r\n          </p>\r\n        </ListItemText>\r\n        <hr></hr>\r\n        <ListItemText>\r\n          <p className=\"text-item\">\r\n            No se puede pasar un <strong>numero en binario</strong> a texto, ya\r\n            que no hay forma de diferenciarlos.\r\n          </p>\r\n        </ListItemText>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Considerations;\r\n","import React, { useState } from \"react\";\nimport Binary from \"../src/Binary\";\nimport Text from \"../src/Text\";\nimport Considerations from \"../src/Considerations\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [binary, setBinary] = useState(\"\");\n\n  const onChangeText = (e) => {\n    const texto = e.target.value;\n    setText(texto);\n  };\n\n  const onChangeBinary = (e) => {\n    const binario = e.target.value;\n    setBinary(binario);\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        <h2> Texto a Binario</h2>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <textarea className=\"textarea_texto\" onChange={onChangeText} />\n          <Binary text={text} />\n        </Grid>\n      </div>\n      <div className=\"container\">\n        <h2> Binario a Texto</h2>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <textarea className=\"textarea_binario\" onChange={onChangeBinary} />\n          <Text binary={binary} />\n        </Grid>\n      </div>\n      <div>\n        <h2 className=\"title-considerations\">Consideraciones Generales</h2>\n        <Considerations />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}